'use strict';
// tests for video
// Generated by serverless-mocha-plugin

const mod               = require('../handler.js');
const mochaPlugin       = require('serverless-mocha-plugin');
const lambdaWrapper     = mochaPlugin.lambdaWrapper;
const expect            = mochaPlugin.chai.expect;

const liveFunction = {
  region: process.env.SERVERLESS_REGION,
  lambdaFunction: process.env.SERVERLESS_PROJECT + '-video'
};

const wrapped = lambdaWrapper.wrap(mod, { handler: 'video' });

describe('video', () => {
  const id = 'x3kxmfs';

  const title = 'GTA'

  const videoKeys = [
    "channel.name",
    "comments_total",
    "created_time",
    "description",
    "embed_url",
    "owner.avatar_120_url",
    "owner.username",
    "title",
  ];

  before(function (done) {
    lambdaWrapper.init(liveFunction);
    done();
  });

  it('contains a value for all keys', (done) => {
    wrapped.run({ query: { id } }, (err, response) => {
      videoKeys.forEach((key) => {
        expect(response[key]).to.not.be.undefined;
      });
      done();
    });
  });

  it('retrieves the correct video', (done) => {
    wrapped.run({ query: { id } }, (err, response) => {
      expect(response.title).to.match(new RegExp(title, 'gi'));
      done();
    });
  });

  it('returns a handled error when ?id= is missing', (done) => {
    wrapped.run({ query: {} }, (err, response) => {
      expect(err).to.match(/400/gi);
      done();
    });
  });

  it('returns a handled error when ?id= is invalid', (done) => {
    wrapped.run({ query: { id: '' } }, (err, response) => {
      expect(err).to.match(/400/gi);
      done();
    });
  });
});
