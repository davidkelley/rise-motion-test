'use strict';
// tests for search
// Generated by serverless-mocha-plugin

const mod               = require('../handler.js');
const mochaPlugin       = require('serverless-mocha-plugin');
const lambdaWrapper     = mochaPlugin.lambdaWrapper;
const expect            = mochaPlugin.chai.expect;

const liveFunction = {
  region: process.env.SERVERLESS_REGION,
  lambdaFunction: process.env.SERVERLESS_PROJECT + '-search'
};

const wrapped = lambdaWrapper.wrap(mod, { handler: 'search' });

describe('search', () => {
  const paginationHeaders = [
    'X-Pagination-Total',
    'X-Pagination-Page',
    'X-Pagination-Per-Page',
    'X-Pagination-Pages'
  ];

  const resultKeys = [
    "channel.name",
    "created_time",
    "id",
    "owner.avatar_120_url",
    "owner.username",
    "title",
  ];

  before((done) => {
    lambdaWrapper.init(liveFunction);
    done();
  });

  it('should contain the correct top level keys', (done) => {
    wrapped.run({}, (err, response) => {
      expect(response).to.have.all.keys(['body', 'header'])
      done();
    });
  });

  it('has an array of results', (done) => {
    wrapped.run({}, (err, response) => {
      expect(response.body).to.not.be.empty;
      done();
    });
  });

  it('has a header object', (done) => {
    wrapped.run({}, (err, response) => {
      expect(response.header).to.be.instanceOf(Object);
      done();
    });
  });

  it('contains the correct pagination headers', (done) => {
    wrapped.run({}, (err, response) => {
      expect(response.header).to.have.all.keys(paginationHeaders)
      done();
    });
  });

  paginationHeaders.forEach((header) => {
    it(`contains a value for ${header}`, (done) => {
      wrapped.run({}, (err, response) => {
        expect(response.header[header]).to.not.be.undefined;
        done();
      });
    });
  });

  it(`contains a value for all keys in results`, (done) => {
    wrapped.run({}, (err, response) => {
      response.body.forEach((result) => {
        resultKeys.forEach((key) => {
          expect(result[key]).to.not.be.undefined;
        });
      });
      done();
    });
  });

  ['cat', 'dog', 'plane', 'funny', 'scary'].forEach((term) => {
    it(`correctly queries: ${term}`, (done) => {
      wrapped.run({ query: { search: term } }, (err, response) => {
        response.body.forEach((result) => {
          expect(result.title).to.match(new RegExp(term, 'gi'))
        });
        done();
      });
    });
  });

  it('correctly sets the limit', (done) => {
    var limit = 4;
    wrapped.run({ query: { limit } }, (err, response) => {
      expect(response.body).to.have.lengthOf(limit);
      done();
    });
  });

  it('correctly paginates', (done) => {
    wrapped.run({}, (err, first) => {
      wrapped.run({ query: { page: 2 } }, (err, second) => {
        expect(first.body[0].title).to.not.equal(second.body[0].title);
        done();
      });
    });
  });
});
